/**************************************************************************
 This is an example for our Monochrome OLEDs based on SSD1306 drivers

 Pick one up today in the adafruit shop!
 ------> http://www.adafruit.com/category/63_98

 This example is for a 128x32 pixel display using I2C to communicate
 3 pins are required to interface (two I2C and one reset).

 Adafruit invests time and resources providing this open
 source code, please support Adafruit and open-source
 hardware by purchasing products from Adafruit!

 Written by Limor Fried/Ladyada for Adafruit Industries,
 with contributions from the open source community.
 BSD license, check license.txt for more information
 All text above, and the splash screen below must be
 included in any redistribution.
 **************************************************************************/

#include <SPI.h> // Includes outside SPI library to allow serial device communication
#include <Wire.h> // Includes outside Wire library to allow I2C communication
#include <Adafruit_GFX.h> // Includes outside Adafruit_GFX library that enables graphics to be displayed on-screen
#include <Adafruit_SSD1306.h> // Includes outside Adafruit_SSD1306 library which installs drivers for the display

#define SCREEN_WIDTH 128 // Declaring OLED display width, in pixels
#define SCREEN_HEIGHT 32 // Declaring OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library. 
// On an arduino UNO:       A4(SDA), A5(SCL)
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); 

#define LOGO_HEIGHT   16 // Create LOGO_HEIGHT variable
#define LOGO_WIDTH    16 // Create LOGO_WIDTH variable 
static const unsigned char PROGMEM logo_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };

void setup() { // Setup function running once
  Serial.begin(9600); // Sets the data rate in bits per second for serial data transmission

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display(); // Activates the display 
  delay(2000); // Pause for 2 seconds

  display.clearDisplay(); // Clear display buffer

  // Draw a single pixel in white
  display.drawPixel(10, 10, SSD1306_WHITE);

  // Show the display buffer on the screen. You MUST call display() after
  // drawing commands to make them visible on screen!
  display.display(); // Activates the display
  delay(2000); // Pause for 2 seconds
  // display.display() is NOT necessary after every single drawing command,
  // unless that's what you want...rather, you can batch up a bunch of
  // drawing operations and then update the screen all at once by calling
  // display.display(). These examples demonstrate both approaches...

  testdrawline();      // Draw many lines
  testdrawstyles();    // Draw 'stylized' characters
 
  display.invertDisplay(true);  // Invert and restore display, pausing in-between
  delay(1000); // Pause for 1 second
  display.invertDisplay(false);  // Invert and restore display, pausing in-between
  delay(1000); // Pause for 1 second

}

void loop() { // Loops the program
}

void testdrawline() { // Draw line function
  int16_t i; // Initialise 16 bit integer

  display.clearDisplay(); // Clear display buffer

  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1); // Pause for 1 millisecond
  }
  for(i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1); // Pause for 1 millisecond
  }
  delay(250); // Pause for 250 milliseconds

  display.clearDisplay(); // Clear display buffer

  for(i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1); // Pause for 1 millisecond
  }
  for(i=0; i<display.width(); i+=4) {
    display.drawLine(display.width()-1, 0, i, display.height()-1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1); // Pause for 1 millisecond
  }

  delay(2000); // Pause for 2 seconds
}

void testdrawstyles(void) {
  display.clearDisplay(); // Clear display buffer

  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.println(F("Your reading is..")); // Display text

  display.setTextSize(2);             // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.println(F("NPK:")); // Display text

  display.display(); // Update screen with new text
  delay(2000); // Pause for 2 seconds
}
